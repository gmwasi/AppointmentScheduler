// <auto-generated />
using System;
using AppointmentScheduler.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AppointmentScheduler.Persistence.Migrations
{
    [DbContext(typeof(AppointmentsContext))]
    [Migration("20210112102317_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("ChildId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ImmunizationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ImmunizationId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CareGiverId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CareGiverId")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Children");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CountyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FacilityLevelId")
                        .HasColumnType("integer");

                    b.Property<int>("Latitude")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int>("Longitude")
                        .HasColumnType("integer");

                    b.Property<string>("MflCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountyId = 24,
                            FacilityLevelId = 28,
                            Latitude = 0,
                            Location = "Nairobi",
                            Longitude = 0,
                            MflCode = "MFL-001",
                            Name = "Kenyatta",
                            PostalAddress = "PO Box 123-00100"
                        });
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.Immunization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AdministrationMode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Dose")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SideEffects")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Immunizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdministrationMode = "Intra- dermal left fore arm",
                            Description = "bacille Calmette-Guerin, is a vaccine for tuberculosis (TB) disease",
                            Dose = "0.05mls for child below 1 year/0.1mls for child above 1 year",
                            Name = "BCG",
                            SideEffects = "side effect"
                        },
                        new
                        {
                            Id = 2,
                            AdministrationMode = "orally",
                            Description = "Bivalent Oral Polio Vaccine(bOPV)",
                            Dose = "2 drops",
                            Name = "POLIO VACCINE",
                            SideEffects = "side effect"
                        },
                        new
                        {
                            Id = 3,
                            AdministrationMode = " Intramuscular in the right outer thigh 2.5 cm(2 fingers apart) from the site of PCV10 injection",
                            Description = "Inactivated Polio Vaccine",
                            Dose = "0.5 mls",
                            Name = "IPV",
                            SideEffects = "side effect"
                        },
                        new
                        {
                            Id = 4,
                            AdministrationMode = "Intramuscular in the right outer thigh",
                            Description = "PNEUMOCOCCAL VACCINE",
                            Dose = "0.5 mls",
                            Name = "PNEUMOCOCCAL VACCINE",
                            SideEffects = "side effect"
                        },
                        new
                        {
                            Id = 5,
                            AdministrationMode = "orally, slowly",
                            Description = "ROTA VIRUS VACCINE (ROTARIX)",
                            Dose = "1.5 mls",
                            Name = "ROTA VIRUS VACCINE (ROTARIX)",
                            SideEffects = "side effect"
                        },
                        new
                        {
                            Id = 6,
                            AdministrationMode = "subcutaneous right upper thigh",
                            Description = "MEASLES RUBELLA VACCINE (MR)",
                            Dose = "0.5 mls",
                            Name = "MEASLES RUBELLA VACCINE (MR)",
                            SideEffects = "side effect"
                        },
                        new
                        {
                            Id = 7,
                            AdministrationMode = "Intra Muscular left upper deltoid",
                            Description = "YELLOW FEVER VACCINE ",
                            Dose = "0.5 mls",
                            Name = "YELLOW FEVER VACCINE ",
                            SideEffects = "side effect"
                        },
                        new
                        {
                            Id = 8,
                            AdministrationMode = "Intra Muscular left upper thigh",
                            Description = "DIPHTHERIA/PERTUSSIS/TETANUS/HEPATITIS B / HAEMOPHILUS INFLUENZA Type b",
                            Dose = "0.5 mls",
                            Name = "DIPHTHERIA/PERTUSSIS/TETANUS/HEPATITIS B / HAEMOPHILUS INFLUENZA Type b",
                            SideEffects = "side effect"
                        });
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.ImmunizationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("ImmunizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ImmunizationId");

                    b.ToTable("ImmunizationPeriods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 0,
                            ImmunizationId = 1,
                            Period = 1
                        },
                        new
                        {
                            Id = 2,
                            Duration = 6,
                            ImmunizationId = 2,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6060)
                        },
                        new
                        {
                            Id = 3,
                            Duration = 10,
                            ImmunizationId = 2,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6071)
                        },
                        new
                        {
                            Id = 4,
                            Duration = 14,
                            ImmunizationId = 2,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6073)
                        },
                        new
                        {
                            Id = 5,
                            Duration = 14,
                            ImmunizationId = 3,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6074)
                        },
                        new
                        {
                            Id = 6,
                            Duration = 6,
                            ImmunizationId = 4,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6076)
                        },
                        new
                        {
                            Id = 7,
                            Duration = 10,
                            ImmunizationId = 4,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6077)
                        },
                        new
                        {
                            Id = 8,
                            Duration = 14,
                            ImmunizationId = 4,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6078)
                        },
                        new
                        {
                            Id = 9,
                            Duration = 6,
                            ImmunizationId = 5,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6080)
                        },
                        new
                        {
                            Id = 10,
                            Duration = 10,
                            ImmunizationId = 5,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6081)
                        },
                        new
                        {
                            Id = 11,
                            Duration = 9,
                            ImmunizationId = 6,
                            Period = 2,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6083)
                        },
                        new
                        {
                            Id = 12,
                            Duration = 18,
                            ImmunizationId = 6,
                            Period = 2,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6084)
                        },
                        new
                        {
                            Id = 13,
                            Duration = 9,
                            ImmunizationId = 7,
                            Period = 2,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6086)
                        },
                        new
                        {
                            Id = 14,
                            Duration = 6,
                            ImmunizationId = 8,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6087)
                        },
                        new
                        {
                            Id = 15,
                            Duration = 10,
                            ImmunizationId = 8,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6089)
                        },
                        new
                        {
                            Id = 16,
                            Duration = 14,
                            ImmunizationId = 8,
                            Period = 1,
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 660, DateTimeKind.Local).AddTicks(6090)
                        });
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LookupType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Lookups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LookupType = 0,
                            Name = "Male",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 658, DateTimeKind.Local).AddTicks(4154)
                        },
                        new
                        {
                            Id = 2,
                            LookupType = 0,
                            Name = "Female",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2277)
                        },
                        new
                        {
                            Id = 3,
                            LookupType = 1,
                            Name = "Single",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2302)
                        },
                        new
                        {
                            Id = 4,
                            LookupType = 1,
                            Name = "Married",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2305)
                        },
                        new
                        {
                            Id = 5,
                            LookupType = 1,
                            Name = "Divorced",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2306)
                        },
                        new
                        {
                            Id = 6,
                            LookupType = 1,
                            Name = "Widow",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2307)
                        },
                        new
                        {
                            Id = 7,
                            LookupType = 1,
                            Name = "Widower",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2311)
                        },
                        new
                        {
                            Id = 8,
                            LookupType = 3,
                            Name = "Administrator",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2313)
                        },
                        new
                        {
                            Id = 9,
                            LookupType = 3,
                            Name = "User",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2314)
                        },
                        new
                        {
                            Id = 10,
                            LookupType = 3,
                            Name = "CareGiver",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2315)
                        },
                        new
                        {
                            Id = 11,
                            LookupType = 4,
                            Name = "Parent",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2317)
                        },
                        new
                        {
                            Id = 12,
                            LookupType = 4,
                            Name = "GrandParent",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2319)
                        },
                        new
                        {
                            Id = 13,
                            LookupType = 4,
                            Name = "Spouse",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2320)
                        },
                        new
                        {
                            Id = 14,
                            LookupType = 4,
                            Name = "Sibling",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2322)
                        },
                        new
                        {
                            Id = 15,
                            LookupType = 4,
                            Name = "Child",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2323)
                        },
                        new
                        {
                            Id = 16,
                            LookupType = 4,
                            Name = "Aunt",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2325)
                        },
                        new
                        {
                            Id = 17,
                            LookupType = 4,
                            Name = "Uncle",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2326)
                        },
                        new
                        {
                            Id = 18,
                            LookupType = 4,
                            Name = "Cousin",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2328)
                        },
                        new
                        {
                            Id = 19,
                            LookupType = 4,
                            Name = "In-law",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2329)
                        },
                        new
                        {
                            Id = 20,
                            LookupType = 4,
                            Name = "CHV",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2330)
                        },
                        new
                        {
                            Id = 24,
                            LookupType = 2,
                            Name = "Nairobi",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2332)
                        },
                        new
                        {
                            Id = 25,
                            LookupType = 2,
                            Name = "Kilifi",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2333)
                        },
                        new
                        {
                            Id = 26,
                            LookupType = 2,
                            Name = "Nyamira",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2334)
                        },
                        new
                        {
                            Id = 27,
                            LookupType = 2,
                            Name = "Nakuru",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2336)
                        },
                        new
                        {
                            Id = 28,
                            LookupType = 5,
                            Name = "National",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2337)
                        },
                        new
                        {
                            Id = 29,
                            LookupType = 5,
                            Name = "County",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2339)
                        },
                        new
                        {
                            Id = 30,
                            LookupType = 5,
                            Name = "Sub-County",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2340)
                        },
                        new
                        {
                            Id = 31,
                            LookupType = 6,
                            Name = "Scheduled",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2342)
                        },
                        new
                        {
                            Id = 32,
                            LookupType = 6,
                            Name = "Attended",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2343)
                        },
                        new
                        {
                            Id = 33,
                            LookupType = 6,
                            Name = "Missed",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2344)
                        },
                        new
                        {
                            Id = 34,
                            LookupType = 6,
                            Name = "Attended Else Where",
                            UpdatedAt = new DateTime(2021, 1, 12, 13, 23, 16, 659, DateTimeKind.Local).AddTicks(2346)
                        });
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FacilityId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("HudumaNamba")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.PersonContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AlternateNumber")
                        .HasColumnType("text");

                    b.Property<int>("CountyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonContacts");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.PersonRelative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("text");

                    b.Property<int>("RelationshipId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonRelatives");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PersonId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.Appointment", b =>
                {
                    b.HasOne("AppointmentScheduler.Core.Entity.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentScheduler.Core.Entity.Immunization", "Immunization")
                        .WithMany()
                        .HasForeignKey("ImmunizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Immunization");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.Child", b =>
                {
                    b.HasOne("AppointmentScheduler.Core.Entity.Person", "CareGiver")
                        .WithOne()
                        .HasForeignKey("AppointmentScheduler.Core.Entity.Child", "CareGiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AppointmentScheduler.Core.Entity.Person", "Person")
                        .WithOne()
                        .HasForeignKey("AppointmentScheduler.Core.Entity.Child", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CareGiver");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.ImmunizationPeriod", b =>
                {
                    b.HasOne("AppointmentScheduler.Core.Entity.Immunization", "Immunization")
                        .WithMany("ImmunizationPeriods")
                        .HasForeignKey("ImmunizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Immunization");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.PersonContact", b =>
                {
                    b.HasOne("AppointmentScheduler.Core.Entity.Person", "Person")
                        .WithMany("PersonContacts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.PersonRelative", b =>
                {
                    b.HasOne("AppointmentScheduler.Core.Entity.Person", "Person")
                        .WithMany("PersonRelatives")
                        .HasForeignKey("PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.User", b =>
                {
                    b.HasOne("AppointmentScheduler.Core.Entity.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppointmentScheduler.Core.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppointmentScheduler.Core.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentScheduler.Core.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppointmentScheduler.Core.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.Immunization", b =>
                {
                    b.Navigation("ImmunizationPeriods");
                });

            modelBuilder.Entity("AppointmentScheduler.Core.Entity.Person", b =>
                {
                    b.Navigation("PersonContacts");

                    b.Navigation("PersonRelatives");
                });
#pragma warning restore 612, 618
        }
    }
}
